%!PS

% begin included library code
/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/map { % array proc -> array
    2 dict begin
    /p exch def
    [ exch
      {
          p
      } forall
    ]
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

% end included library code

/arithmeticmean {
    dup { add } reduce exch length div
} bind def

/geometricmean {
    dup { mul } reduce exch length 1 exch div exp
} bind def

/harmonicmean {
    dup { 1 exch div } map { add } reduce exch length exch div
} bind def

/round1 {
    10 mul 0.49999 add cvi 10 div
} bind def

/pythagoreanmeans {
    << exch
       (AM) exch
       dup arithmeticmean round1 exch
       (GM) exch
       dup geometricmean round1 exch
       (HM) exch
       harmonicmean round1 
    >>
} bind def

(pythagorean means) test.start
[ 1 3 5 7 9 ] pythagoreanmeans << (AM) 5.0 (GM) 3.9 (HM) 2.8 >> deepeq test
[ 2 4 6 8 10 ] pythagoreanmeans << (AM) 6.0 (GM) 5.2 (HM) 4.4 >> deepeq test
[ 1 2 3 4 5 ] pythagoreanmeans << (AM) 3.0 (GM) 2.6 (HM) 2.2 >> deepeq test
test.end
