#! /usr/bin/env raku

unit sub MAIN (:v(:$verbose));

my @player_ages = (
  [20, "Alex"  ],
  [28, "Joe"   ],
  [38, "Mike"  ],
  [18, "Alex"  ],
  [25, "David" ],
  [18, "Simon" ],
);

my @player_names = (
  ["Alex", "Stewart"],
  ["Joe",  "Root"   ],
  ["Mike", "Gatting"],
  ["Joe",  "Blog"   ],
  ["Alex", "Jones"  ],
  ["Simon","Duane"  ],
);

hash-join-sorted(@player_ages, 1, @player_names, 0);

sub hash-join-sorted (@table1, $index1, @table2, $index2)
{
  my %table1;

  for @table1 -> $row
  {
    my @data = @$row;
    my $id   = @data[$index1];

    say ": Table 1 Row (add): $id -> { @data.join(", ") }" if $verbose;
    %table1{$id}.push: @data;
  }

  my %result;

  for @table2 -> $row
  {
    my @data = @$row;
    my $id   = @data.splice($index2, 1);
    
    if $verbose
    {
      say ": Table 1 Row (scan): $id -> { @(%table1{$id}).join(", ") }";
      say ": Table 2 Row (scan): $id -> { @data.join(", ") }";
    }

    for @(%table1{$id}) -> $row
    {
       %result{$id}.push: (@$row, @data).flat;
       say ": Result Table Row: $id -> { @$row.join(", ") } + { @data.join(", ") }" if $verbose;
    }
  }

  for %result.keys.sort -> $id
  {
    my @rows = @(%result{$id});

    for @rows -> $row
    {
      say nicify(@$row); 
    }
  }
}

sub nicify (*@data)
{
  return @data.map({ $_ ~~ Numeric ?? $_ !! '"' ~ $_ ~ '"'  }).join(", ");
}
