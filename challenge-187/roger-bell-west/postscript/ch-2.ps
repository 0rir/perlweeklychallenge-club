%!PS

% begin included library code
% see https://github.com/Firedrake/postscript-libraries/
/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/quicksort { % [ a c b ] -> [ a b c ]
    1 dict begin
    /arr exch def
    arr length 0 gt {
        0 arr length 1 sub quicksort.main
    } if
    arr
    end
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def


% end included library code

/reverse {
    3 dict begin
    /str exch def
    str length 0 gt {
        /temp str 0 get def
        /i 0 def
        str length 2 idiv {
            /temp str i get def
            str i str str length i sub 1 sub get put
            str str length i sub 1 sub temp put
            /i i 1 add def
        } repeat
    } if
    str
    end
} bind def

/magicaltriplets {
    6 dict begin
    /a exch def
    /out 0 array def
    /mv 0 def
    0
    1
    a length 3 sub {
        /ai exch def
        ai 1 add
        1
        a length 2 sub {
            /bi exch def
            bi 1 add
            1
            a length 1 sub {
                /ci exch def
                a ai get a bi get add a ci get gt
                a bi get a ci get add a ai get gt and
                a ai get a ci get add a bi get gt and {
                    /v a ai get a bi get add a ci get add def
                    v mv gt {
                        /mv v def
                        /out [ a ai get a bi get a ci get ] def
                    } if
                } if
            } for
        } for
    } for
    out quicksort reverse
    end
} bind def

(magicaltriplets) test.start
[ 1 2 3 2 ] magicaltriplets [ 3 2 2 ] deepeq test
[ 1 3 2 ] magicaltriplets [ ] deepeq test
[ 1 1 2 3 ] magicaltriplets [ ] deepeq test
[ 2 4 3 ] magicaltriplets [ 4 3 2 ] deepeq test
test.end
