%!PS

% begin library code

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/apush { % [a b] c -> [a b c]
    exch
    [ exch aload length 2 add -1 roll ]
} bind def

% end library code

/ssd {
    1 dict begin
    /out 0 def
    {
        dup 0 le {
            pop
            exit
        } if
        dup 10 mod dup mul out add /out exch def
        10 idiv
    } loop
    out
    end
} bind def

/happy {
    7 dict begin
    /ct exch def
    /hm << 1 true >> def
    /c 0 def
    /out 0 array def
    {
        /c c 1 add def
        hm c known not {
            /v c def
            /ss << v true >> def
            /h true def
            {
                hm v known {
                    /h hm v get def
                    exit
                } {
                    /v v ssd def
                    ss v known {
                        /h false def
                        exit
                    } if
                } ifelse
                ss v true put
            } loop
            ss {
                pop
                hm exch h put
            } forall
        } if
        hm c get {
            /out out c apush def
            out length ct ge {
                exit
            } if
        } if
    } loop
    out
    end
} bind def

(happy) test.start
8 happy [ 1 7 10 13 19 23 28 31 ] deepeq test
test.end

