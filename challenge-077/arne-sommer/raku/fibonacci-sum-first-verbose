#! /usr/bin/env raku

subset PositiveInt of Int where * >= 1;

unit sub MAIN (PositiveInt $N, :v(:$verbose), :u(:$upto), :f(:$first));

my $label;
my $found;
my $found2 = True;
my $recursion;

if $first
{
  my $current = 1;
  
  while ( $found2 )
  {
    $recursion = 0;
    fibonal-decomposition($current);
    say ": Checking $current [Recursive calls: $recursion]" if $verbose;
    $current++;
  }
}
else
{
  $upto
    ?? (1..$N).map({ fibonal-decomposition($_) })
    !! fibonal-decomposition($N);
}

sub fibonal-decomposition($target)
{
  $found = False;
  $label = 'a';
  
  my @fibs;
  my $fibonacci := (1, 1, * + * ... Inf);

  for $fibonacci -> $fib { last if $fib > $target; @fibs.unshift: $fib; }
  @fibs.pop;

  if $verbose && ! $first
  {
    say ": Target: $target" if $upto;
    say ": Fibonacci (reverse): { @fibs.join(", ") }";
  }

  recurse(0, (), @fibs, $target);

  unless $first
  {
    say "0" unless $found;
    say "" if $upto;
  }
}

sub recurse ($value is copy, @values is copy, @fibonacci is copy, $input)
{
  $recursion++;
  if $value < $input
  {  
    while @fibonacci
    {
      my $add = @fibonacci.shift;
      
      if $value + $add <= $input
      {  
        my $value2  = $value + $add;
	my @values2 = @values.clone.push: $add;
        recurse($value2, @values2, @fibonacci, $input);
      } 
    }
  }

  elsif $value == $input
  {
    say "{ $label++ }) { @values.join(' + ') } = $input" unless $first;
    $found = True;
  }
  elsif $first
  {
    $found2 = False;
  }
}
