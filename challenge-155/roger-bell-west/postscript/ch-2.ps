%!PS

/quicksort { % [ a c b ] -> [ a b c ]
    1 dict begin
    /arr exch def
    0 arr length 1 sub quicksort.main
    arr
    end
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def

/apush { % [a b] c -> [a b c]
    /t exch def
    [ exch aload pop t ]
} bind def

/genprimes {
    /mx exch def
    /primesh mx dict def
    2 1 3 {
        primesh exch true put
    } for
    6 6 mx 1 add {
        dup 1 sub exch 1 add 2 exch {
            dup mx le {
                primesh exch true put
            } {
                pop
            } ifelse
        } for
    } for
    /q [ 3 5 7 ] def
    /qi 0 def
    /p 2 def
    /mr mx sqrt cvi def
    {
        p mr le not {
            exit
        } if
        primesh p known {
            p dup mul p mx {
                primesh exch undef
            } for
        } if
        q length qi sub 2 le {
            /q q q q length 1 sub get 4 add apush def
            /q q q q length 1 sub get 2 add apush def
        } if
        /p q qi get def
        /qi qi 1 add def
    } loop
    [ primesh { pop } forall ] quicksort
} bind def

/primefactor {
    4 dict begin
    /n exch def
    /f 1 dict def
    /m n def
    [ 2 3 5 7 ] {
        /p exch def
        {
            m p mod 0 eq {
                f p known {
                    f p f p get 1 add put
                } {
                    f p 1 put
                } ifelse
                /m m p idiv def
            } {
                exit
            } ifelse
        } loop
    } forall
    m 1 gt {
        m genprimes {
            /p exch def
            {
                m p mod 0 eq {
                    f p known {
                        f p f p get 1 add put
                    } {
                        f p 1 put
                    } ifelse
                    /m m p idiv def
                } {
                    exit
                } ifelse
            } loop
            m 1 eq {
                exit
            }
        } forall
    } if
    f
    end
} bind def

/gcd {
    {
        dup
        3 1 roll
        mod
        dup 0 eq {
            pop exit
        } if
    } loop
} bind def

/lcm {
    dup 3 -1 roll
    dup 4 -1 roll
    gcd idiv mul
} bind def

/pisano {
    5 dict begin
    /n exch def
    /a 1 def
    n primefactor {
        exp cvi /nn exch def
        /t 1 def
        /x [ 1 1 ] def
        {
            x 0 get 0 eq x 1 get 1 eq and {
                exit
            } if
            /t t 1 add def
            /x [ x 1 get x 0 get x 1 get add nn mod ] def
        } loop
        /a t a lcm def
    } forall
    a
    end
} bind def

3 pisano 8 eq { (Pass) } { (FAIL) } ifelse print ( ) print
6 pisano 24 eq { (Pass) } { (FAIL) } ifelse =
