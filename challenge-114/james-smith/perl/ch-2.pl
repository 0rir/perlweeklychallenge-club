#!/usr/local/bin/perl

use strict;

use warnings;
use feature qw(say);
use Test::More;
use Benchmark qw(cmpthese);

my @sols = (


#is( next_bin_rindex2( $_->[0]), $_->[1] ) foreach @sols;exit;
#is( next_bin_rex( $_->[0]), $_->[1] ) foreach @sols;exit;
#is( next_bin_rrev($_->[0]), $_->[1] ) foreach @sols;exit;
#is( next_bin(     $_->[0]), $_->[1] ) foreach @sols;exit;
#done_testing();

my @ranges = (
  [ 4000, 1,                       500 ],
  [ 1000,  500,                    2500 ],
  #[ 100,  1_047_576,         1_049_576 ],
  #[ 50,   1_073_740_824, 1_073_742_824 ],
);

foreach my $r (@ranges) {
  cmpthese( $r->[0], {
    'rind2' => sub { next_bin_rindex2( $_ ) foreach $r->[1] .. $r->[2] },
    'rind'  => sub { next_bin_rrev( $_ ) foreach $r->[1] .. $r->[2] },
    'rex'   => sub { next_bin_rex( $_ ) foreach $r->[1] .. $r->[2] },
#    'simp' => sub { next_bin(      $_ ) foreach $r->[1] .. $r->[2] },
  });
}

sub next_bin {
  my $n = shift;
  my $c = (sprintf '%b', $n) =~ tr/1/1/;
  while(++$n) {
    return $n if $c == ( (sprintf '%b', $n) =~ tr/1/1/ );
  }
}

## All numbers can be written in the binary form as
##   ^[01]*(01)1*0*$
## This we can match with the regexp..
##   /01(1*)(0*)$/
## The next highest number with the same number of bits
## flips the 01 to 10 and switches the 1s with the 0s
## The regex replace is then:
##   /01(1*)(0*)$/10$2$1/

sub next_bin_rex {
  return oct '0b'.sprintf('0%b',shift) =~ s{01(1*)(0*)$}{10$2$1}r;
}

## We further note we can find the "01" with rindex
## rather than having to use a regex {regex's are expensive}
##
## We also note that to flip 1111000 to 0001111 we don't need to
## know how many 1s there are or 0s we just reverse the string.
##
## This gives us the following similar function which DOES NOT
## use regexs
##
## Usually avoiding regexs leads to more performant code (unless the
## replacement for the regex is particularly complex - which in this
## case it isn't!)

sub next_bin_rrev {
  my $t = rindex my $s = sprintf('0%b',shift),'01';
  return oct '0b'.substr($s,0,$t).'10'.reverse substr $s,$t+2;
}

sub next_bin_rindex2 {
  my $t = rindex my $s = sprintf('%b',my $n = shift),'1';
  return $n - 1 + (1<<(-1-$t+length$s)) + (1<<(-1+$t-rindex $s,'0',$t));
}


