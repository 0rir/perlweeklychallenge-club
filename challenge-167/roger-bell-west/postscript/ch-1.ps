%!PS

% begin library code

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/quicksort { % [ a c b ] -> [ a b c ]
    1 dict begin
    /arr exch def
    0 arr length 1 sub quicksort.main
    arr
    end
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def

/apush { % [a b] c -> [a b c]
    exch
    [ exch aload length 2 add -1 roll ]
} bind def

/genprimes {
    /mx exch def
    /primesh mx dict def
    2 1 3 {
        primesh exch true put
    } for
    6 6 mx 1 add {
        dup 1 sub exch 1 add 2 exch {
            dup mx le {
                primesh exch true put
            } {
                pop
            } ifelse
        } for
    } for
    /q [ 3 5 7 ] def
    /qi 0 def
    /p 2 def
    /mr mx sqrt cvi def
    {
        p mr le not {
            exit
        } if
        primesh p known {
            p dup mul p mx {
                primesh exch undef
            } for
        } if
        q length qi sub 2 le {
            /q q q q length 1 sub get 4 add apush def
            /q q q q length 1 sub get 2 add apush def
        } if
        /p q qi get def
        /qi qi 1 add def
    } loop
    [ primesh { pop } forall ] quicksort
} bind def

/toset { % array -> dict of (array, true)
    << exch
       {
           true
       } forall
    >>
} bind def

% end library code

/cyclicpermute {
    3 dict begin
    /n exch def
    [
        /ss n 1 sub log cvi 1 add string n exch cvs def
        ss length {
            /ss2 ss length string def
            ss2 0 ss 1 ss length 1 sub getinterval putinterval
            ss2 ss2 length 1 sub ss 0 get put
            ss2 cvi
            /ss ss2 def
        } repeat
    ]
    end
} bind def

/circular {
    8 dict begin
    /ct exch def
    /mindigits exch def
    /o 0 array def
    /base 1 def
    mindigits 1 sub {
        /base base 10 mul def
    } repeat
    {
        o length ct ge {
            exit
        } if
        /pr base 10 mul genprimes def
        /prs pr toset def
        pr {
            /cp exch def
            cp base ge {
                /v true def
                /cpp cp cyclicpermute def
                cpp {
                    prs exch known not {
                        /v false def
                        exit
                    } if
                } forall
                v {
                    /o o cp apush def
                    o length ct ge {
                        exit
                    } if
                    cpp {
                        prs exch undef
                    } forall
                } if
            } if
        } forall
        /base base 10 mul def
    } loop
    o
    end
} bind def

(circular) test.start
123 cyclicpermute [ 231 312 123 ] deepeq test

3 10 circular
[ 113 197 199 337 1193 3779 11939 19937 193939 199933 ]
deepeq test

test.end
