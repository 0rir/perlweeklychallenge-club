#!/usr/local/bin/perl

use strict;

use warnings;
use feature qw(say);
use Test::More;

## Generating self descriptive numbers can be split between
## the case where n >= 7 and n < 7...
## As we are asked for the first 3 these all exist in the case
## where n<7....
## 
## To get the next we can write them (in base "n") as 
## All other numbers can be generated by the rule
## "n-4", "2", "1", "0" (n-7 times), "1", "0", "0", "0"
##
## We loop through numbers starting 1 to see if they are self
## descriptive.
## To get the desciption of a number of length k, we loop from
## 0..(k-1) counting the number of each digit in the string...
## We can do this with a harcoded series of tr///s but in if
## we want something dynamic we can write this as 
##
## @Q = m{($_)}g; $count = scalar @Q;
##
## we can do this in one line by using @{[ ]} to convert to the
## list of matches to an array { subtle distinction here between 
## lists and arrays! } and counting it by getting the scalar of
## the array...
##
## The description is got by stitching those counts together...
## We can do this in the one-line join q(), map below..
## We just store it the list if the description and the number are
## the same....

my ($c,@res) = 0;

while( ++$c && @res<3 ) {
  push @res, $c if $c == join q(),
    map { scalar @{[ $c=~m{($_)}g ]} } 0 .. -1 + length $c;
}

say "@res";

