#! /usr/bin/env raku

unit sub MAIN (Int $limit where $limit > 0 = 10, :v(:$verbose));

my $wns := (1..Inf).grep( *.&is-weird );

say $wns.head($limit).join(", ");

sub is-weird (Int $number)
{
  my @proper-divisors = divisors($number, :not-self);

  return @proper-divisors.sum <= $number
    ?? False
    !! ! so any(@proper-divisors.combinations>>.sum) == $number;
}

sub divisors ($number, :$not-self, :$not-one)
{
  my @divisors;
  
  for ($not-one ?? 2 !! 1) .. $number/2 -> $candidate
  {
    @divisors.push: $candidate if $number %% $candidate;
  }
  
  @divisors.push: $number unless $not-self;

  say ": $number has divisors: { @divisors.join(", ") }" if $verbose;

  return @divisors;
}
