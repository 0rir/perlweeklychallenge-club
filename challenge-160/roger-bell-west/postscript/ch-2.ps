%!PS

% begin library code

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/enumerate.array {
    1 dict begin
    /a exch def
    [
      0 1 a length 1 sub {
          [ exch dup a exch get ]
      } for
    ]
    end
} bind def

% end library code

/equilibriumindex {
    3 dict begin
    /x -1 def
    dup { add } reduce /sm exch def
    /sa 0 def
    enumerate.array {
        dup 1 get sa add /sa exch def
        sa sm eq {
            0 get /x exch def
            exit
        } if
        1 get sa add /sa exch def
    } forall
    x
    end
} bind def

(equilibriumindex) test.start

[ 1 3 5 7 9 ] equilibriumindex 3 eq test
[ 1 2 3 4 5 ] equilibriumindex -1 eq test
[ 2 4 2 ] equilibriumindex 1 eq test

test.end
