%!PS

% begin included library code
% see https://github.com/Firedrake/postscript-libraries/
/filter { % array proc(bool) -> array
    1 dict begin
    /p exch def
    [ exch
      {
          dup p not
          {
              pop
          } if
      } forall
    ]
    end
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/apush.left { % [b c] a -> [a b c]
    exch % a [b c]
    [ 3 1 roll aload pop ]
} bind def

/quicksort { % [ a c b ] -> [ a b c ]
    1 dict begin
    /arr exch def
    0 arr length 1 sub quicksort.main
    arr
    end
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def


% end included library code

/permutation2rank {
    8 dict begin
    /perm exch def
    /n 0 def
    /pp [ perm aload pop ] quicksort def
    /l 1 def
    /oi 0 array def
    2 1 perm length {
        /inx exch def
        /oi oi l apush.left def
        /l l inx mul def
    } for
    0 1 perm length 2 sub {
        /inx exch def
        /base 0 dict def
        /i 0 def
        pp {
            base exch i put
            /i i 1 add def
        } forall
        /n n oi inx get base perm inx get get mul add def
        base perm inx get undef
        /pp base keys quicksort def
    } for
    n
    end
} bind def

/rank2permutation {
    7 dict begin
    /rank exch def
    /perm exch def
    /pp [ perm aload pop ] quicksort def
    /l 1 def
    /oi 0 array def
    2 1 perm length {
        /inx exch def
        /oi oi l apush.left def
        /l l inx mul def
    } for
    [
        0 1 perm length 2 sub {
            /inx exch def
            /ix rank oi inx get idiv def
            pp ix get
            /pp pp { pp ix get ne } filter def
            /rank rank oi inx get mod def
        } for
        pp 0 get
    ]
    end
} bind def

(permrank) test.start
[ 1 0 2 ] permutation2rank 2 eq test
[ 0 1 2 ] 1 rank2permutation [ 0 2 1 ] deepeq test
[ 2 0 3 1 ] permutation2rank 13 eq test
[ 1 3 2 0 ] 7 rank2permutation [ 1 0 3 2 ] deepeq test
test.end
