%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/enumerate.array {
    1 dict begin
    /a exch def
    [
      0 1 a length 1 sub {
          [ exch dup a exch get ]
      } for
    ]
    end
} bind def


% end included library code

/peakpositions {
    0 dict begin
    /a exch def
    [
        a enumerate.array {
            aload pop
            /x exch def
            /i exch def
            /l false def
            i 0 eq {
                /l true def
            } if
            l not {
                x a i 1 sub get gt {
                    /l true def
                } if
            } if
            /r false def
            i a length 1 sub eq {
                /r true def
            } if
            r not {
                x a i 1 add get gt {
                    /r true def
                } if
            } if
            l r and {
                i
            } if
        } forall
    ]
    end
} bind def

(peakpositions) test.start
[1 3 2] peakpositions [1] deepeq test
[2 4 6 5 3] peakpositions [2] deepeq test
[1 2 3 2 4 1] peakpositions [2 4] deepeq test
[5 3 1] peakpositions [0] deepeq test
[1 5 1 5 1 5 1] peakpositions [1 3 5] deepeq test
test.end
