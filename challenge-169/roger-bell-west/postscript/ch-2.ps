%!PS

% begin included library code

/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def

/gcd {
    {
        dup
        3 1 roll
        mod
        dup 0 eq {
            pop exit
        } if
    } loop
} bind def

/apush { apush.right } bind def

/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/genprimes {
    /mx exch def
    /primesh mx dict def
    2 1 3 {
        primesh exch true put
    } for
    6 6 mx 1 add {
        dup 1 sub exch 1 add 2 exch {
            dup mx le {
                primesh exch true put
            } {
                pop
            } ifelse
        } for
    } for
    /q [ 3 5 7 ] def
    /qi 0 def
    /p 2 def
    /mr mx sqrt cvi def
    {
        p mr le not {
            exit
        } if
        primesh p known {
            p dup mul p mx {
                primesh exch undef
            } for
        } if
        q length qi sub 2 le {
            /q q q q length 1 sub get 4 add apush def
            /q q q q length 1 sub get 2 add apush def
        } if
        /p q qi get def
        /qi qi 1 add def
    } loop
    primesh keys
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/apush.right { % [a b] c -> [a b c]
    exch
    [ exch aload length 2 add -1 roll ]
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/quicksort { % [ a c b ] -> [ a b c ]
    1 dict begin
    /arr exch def
    0 arr length 1 sub quicksort.main
    arr
    end
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def


/listmin {
    { min } reduce
} bind def

/values { % dict -> array of dict values
    [ exch
      {
          exch pop
      } forall
    ]
} bind def

/primefactor {
    4 dict begin
    /n exch def
    /f 1 dict def
    /m n def
    n sqrt cvi genprimes quicksort {
        /p exch def
        {
            m p mod 0 eq {
                f p known {
                    f p f p get 1 add put
                } {
                    f p 1 put
                } ifelse
                /m m p idiv def
            } {
                exit
            } ifelse
        } loop
        m 1 eq {
            exit
        } if
    } forall
    m 1 gt {
        f m known {
            f m f m get 1 add put
        } {
            f m 1 put
        } ifelse
    } if
    f
    end
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

% end included library code

/achilles {
    3 dict begin
    /ct exch def
    [
        1
        {
            1 add dup primefactor values /pv exch def
            pv length 1 gt 
            pv listmin 2 ge and
            pv { gcd } reduce 1 eq and {
                dup exch
                /ct ct 1 sub def
                ct 0 le {
                    exit
                } if
            } if
        } loop
        pop
    ]
    end
} bind def

(achilles) test.start

20 achilles
[ 72 108 200 288 392 432 500 648 675 800 864 968 972 1125 1152 1323
  1352 1372 1568 1800 ]
deepeq test

test.end
